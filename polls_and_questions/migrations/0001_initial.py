# Generated by Django 4.0.5 on 2022-07-18 12:41

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('users', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Choice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('choice', models.CharField(max_length=256, verbose_name='choice')),
            ],
        ),
        migrations.CreateModel(
            name='PollConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enabled', models.BooleanField(default=True, verbose_name='Visibility in Event Room')),
                ('answers_privacy', models.CharField(choices=[('EVERYONE', 'Everyone can see the results'), ('CREATOR_AND_SPEAKERS', 'The creator and the speakers can see the results'), ('ONLY_CREATOR', 'Only the creator can see the results')], max_length=20, verbose_name='Defaults results privacy')),
                ('multiple_answers', models.BooleanField(default=True, verbose_name='allow multiple answer answer')),
                ('allow_no_limited_answering', models.BooleanField(default=True, verbose_name='allow answering with no time limitation')),
                ('answering_time_limit', models.PositiveIntegerField(choices=[(5, '5'), (10, '10'), (15, '15'), (20, '20'), (25, '25'), (30, '30'), (35, '35'), (40, '40'), (45, '45'), (50, '50'), (55, '55'), (60, '60'), (65, '65'), (70, '70'), (75, '75')], default=5)),
            ],
        ),
        migrations.CreateModel(
            name='QuestionConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enabled', models.BooleanField(default=True, verbose_name='Enable the Q&A componet')),
                ('allow_audience_create_questions', models.BooleanField(default=True, verbose_name='allow audience create questions')),
                ('auto_publish', models.BooleanField(default=True, verbose_name='Auto publish create questions')),
                ('allow_audience_vote_questions', models.BooleanField(default=True, verbose_name='audience can vote questions')),
                ('allow_audience_vote_answers', models.BooleanField(default=True, verbose_name='audience can vote answers')),
                ('answers_privacy', models.CharField(choices=[('EVERYONE', 'Everyone can see the results'), ('CREATOR_AND_SPEAKERS', 'The creator and the speakers can see the results'), ('ONLY_CREATOR', 'Only the creator can see the results')], max_length=20, verbose_name='results privacy')),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('watchit_uuid', models.UUIDField(verbose_name='event identifier')),
                ('question', models.CharField(max_length=256, verbose_name='question')),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('published', models.BooleanField(default=False, verbose_name='is published')),
                ('streaming', models.BooleanField(default=False, verbose_name='is streaming')),
                ('configuration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polls_and_questions.questionconfig')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.interactionuser')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.CharField(max_length=256, verbose_name='answer')),
                ('creation_date', models.DateTimeField(auto_now=True, verbose_name='creation_date')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.interactionuser')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='polls_and_questions.question')),
            ],
            options={
                'verbose_name': 'question answer',
            },
        ),
        migrations.CreateModel(
            name='Poll',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('watchit_uuid', models.UUIDField(verbose_name='event identifier')),
                ('question', models.CharField(max_length=256, verbose_name='question')),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('published', models.BooleanField(default=False, verbose_name='is published')),
                ('streaming', models.BooleanField(default=False, verbose_name='is streaming')),
                ('configuration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polls_and_questions.pollconfig')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.interactionuser')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateTimeField(auto_now=True, verbose_name='creation_date')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.interactionuser')),
                ('poll', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polls_and_questions.poll')),
                ('selected_choice', models.ManyToManyField(to='polls_and_questions.choice')),
            ],
            options={
                'verbose_name': 'poll answer',
            },
        ),
        migrations.CreateModel(
            name='EventConfig',
            fields=[
                ('watchit_uuid', models.UUIDField(primary_key=True, serialize=False, verbose_name='event identifier')),
                ('default_polls_config', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='default_polls_config', to='polls_and_questions.pollconfig')),
                ('default_questions_config', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='default_questions_config', to='polls_and_questions.questionconfig')),
            ],
        ),
        migrations.AddField(
            model_name='choice',
            name='poll',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='polls_and_questions.poll'),
        ),
        migrations.CreateModel(
            name='QVote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateTimeField(auto_now=True, verbose_name='creation_date')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='polls_and_questions.question')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.interactionuser')),
            ],
            options={
                'verbose_name': 'question vote',
                'unique_together': {('question', 'user')},
            },
        ),
        migrations.CreateModel(
            name='QAVote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateTimeField(auto_now=True, verbose_name='creation_date')),
                ('answer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='polls_and_questions.qanswer')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.interactionuser')),
            ],
            options={
                'verbose_name': 'answer vote',
                'unique_together': {('answer', 'user')},
            },
        ),
    ]
