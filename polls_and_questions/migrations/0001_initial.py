# Generated by Django 4.0.5 on 2022-07-03 19:35

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Choice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('choice', models.CharField(max_length=256, verbose_name='choice')),
                ('order', models.PositiveIntegerField(verbose_name='order')),
            ],
            options={
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='DefaultPollConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enabled', models.BooleanField(verbose_name='Visibility in Event Room')),
                ('show_in_event_room', models.BooleanField(verbose_name='Show polls in the Event Room')),
                ('privacy_mode', models.CharField(choices=[('EVERYONE', 'Everyone can see the results'), ('CREATOR_AND_SPEAKERS', 'The creator and the speakers can see the results'), ('CREATOR', 'Only the creator can see the results')], max_length=20, verbose_name='Defaults results privacy')),
                ('multiple_answers', models.BooleanField(verbose_name='allow multiple answer response')),
                ('answering_time_limit', models.PositiveIntegerField(choices=[(0, ''), (5, '5'), (10, '10'), (15, '15'), (20, '20'), (25, '25'), (30, '30'), (35, '35'), (40, '40'), (45, '45'), (50, '50'), (55, '55'), (60, '60'), (65, '65'), (70, '70'), (75, '75')], default=0)),
            ],
        ),
        migrations.CreateModel(
            name='DefaultQuestionConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enabled', models.BooleanField(verbose_name='Enable the Q&A componet')),
                ('allow_audience_create_questions', models.BooleanField(verbose_name='allow audience create questions')),
                ('auto_publish', models.BooleanField(verbose_name='Auto publish create questions')),
                ('allow_audience_vote_questions', models.BooleanField(verbose_name='audience can vote questions')),
                ('allow_audience_vote_answers', models.BooleanField(verbose_name='audience can vote answers')),
                ('privacy_mode', models.CharField(choices=[('EVERYONE', 'Everyone can see the results'), ('CREATOR_AND_SPEAKERS', 'The creator and the speakers can see the results'), ('CREATOR', 'Only the creator can see the results')], max_length=20, verbose_name='results privacy')),
            ],
        ),
        migrations.CreateModel(
            name='Poll',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('watchit_id', models.UUIDField(verbose_name='event identifier')),
                ('creator_id', models.UUIDField(verbose_name='creator identifier')),
                ('question', models.CharField(max_length=256, verbose_name='question')),
                ('creation_date', models.DateTimeField()),
                ('published', models.BooleanField(verbose_name='is published')),
                ('streaming', models.BooleanField(verbose_name='is streaming')),
                ('answering_time_limit', models.PositiveIntegerField(choices=[(0, ''), (5, '5'), (10, '10'), (15, '15'), (20, '20'), (25, '25'), (30, '30'), (35, '35'), (40, '40'), (45, '45'), (50, '50'), (55, '55'), (60, '60'), (65, '65'), (70, '70'), (75, '75')], default=0)),
                ('privacy_mode', models.CharField(choices=[('EVERYONE', 'Everyone can see the results'), ('CREATOR_AND_SPEAKERS', 'The creator and the speakers can see the results'), ('CREATOR', 'Only the creator can see the results')], max_length=20, verbose_name='results privacy')),
                ('multiple_answers', models.BooleanField(verbose_name='allow multiple answer response')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('watchit_id', models.UUIDField(verbose_name='event identifier')),
                ('creator_id', models.UUIDField(verbose_name='creator identifier')),
                ('question', models.CharField(max_length=256, verbose_name='question')),
                ('allow_audience_create_questions', models.BooleanField(verbose_name='allow audience create questions')),
                ('auto_publish', models.BooleanField(verbose_name='Auto publish create questions')),
                ('allow_audience_vote_questions', models.BooleanField(verbose_name='audience can vote questions')),
                ('allow_audience_vote_answers', models.BooleanField(verbose_name='audience can vote answers')),
                ('privacy_mode', models.CharField(choices=[('EVERYONE', 'Everyone can see the results'), ('CREATOR_AND_SPEAKERS', 'The creator and the speakers can see the results'), ('CREATOR', 'Only the creator can see the results')], max_length=20, verbose_name='results privacy')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('participant_id', models.UUIDField(verbose_name='participant id')),
                ('response', models.CharField(max_length=256, verbose_name='response')),
                ('date', models.DateTimeField(auto_now=True, verbose_name='date')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polls_and_questions.question')),
            ],
            options={
                'verbose_name': 'question responses',
            },
        ),
        migrations.CreateModel(
            name='PResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('participant_id', models.UUIDField(verbose_name='participant identificator')),
                ('date', models.DateTimeField(auto_now=True, verbose_name='date')),
                ('poll', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polls_and_questions.poll')),
                ('selected_choice', models.ManyToManyField(to='polls_and_questions.choice')),
            ],
            options={
                'verbose_name': 'poll responses',
            },
        ),
        migrations.CreateModel(
            name='EventConfig',
            fields=[
                ('watchit_id', models.UUIDField(primary_key=True, serialize=False, verbose_name='event identifier')),
                ('default_polls_config', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='default_polls_config', to='polls_and_questions.defaultpollconfig')),
                ('default_questions_config', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='default_questions_config', to='polls_and_questions.defaultquestionconfig')),
            ],
        ),
        migrations.AddField(
            model_name='choice',
            name='poll',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='polls_and_questions.poll'),
        ),
        migrations.AlterUniqueTogether(
            name='choice',
            unique_together={('poll', 'order')},
        ),
    ]
